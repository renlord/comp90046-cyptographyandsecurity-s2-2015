import unittest
import random

import cryptoclient.crypto.supplementary as candidate
import reference.crypto.supplementary as reference

import reference.crypto.dhex as dhex

from timeout import timeout

class TestSupplementaryMethods(unittest.TestCase):

	def setUp(self):
		generator = 0x
		prime = 0x87A8E61DB4B6663CFFBBD19C651959998CEEF608660DD0F25D2CEED4435E3B00E00DF8F1D61957D4FAF7DF4561B2AA3016C3D91134096FAA3BF4296D830E9A7C209E0C6497517ABD5A8A9D306BCF67ED91F9E6725B4758C022E0B1EF4275BF7B6C5BFC11D45F9088B941F54EB1E59BB8BC39A0BF12307F5C4FDB70C581B23F76B63ACAE1CAA6B7902D52526735488A0EF13C6D9A51BFA4AB3AD8347796524D8EF6A167B5A41825D967E144E5140564251CCACB83E6B486F6B3CA3F7971506026C0B857F689962856DED4010ABD0BE621C3A3960A54E710C375F26375D7014103A4B54330C198AF126116D2276E11715F693877FAD7EF09CADB094AE91E1A1597 
		private1 = random.getrandbits(2048)
		private2 = random.getrandbits(2048)
		public1 = dhex.diffie_hellman_pair(generator, prime, private1)[1]
		public2 = dhex.diffie_hellman_pair(generator, prime, private2)[1]
		self.dh_key = dhex.diffie_hellman_shared(private1, public2, prime)
		self.dh_p = prime

	@timeout(2)
	def test_parityWordChecksum(self):
		err = "FAILED: parityWordChecksum. Non matching checksum"
		self.assertEqual(candidate.parityWordChecksum(self.dh_key), reference.parityWordChecksum(self.dh_key), err)

	@timeout(2)
	def test_deriveSupplementaryKey(self):
		err = "FAILED: deriveSupplementaryKey. Non matching supplementary key"
		self.assertEqual(candidate.deriveSupplementaryKey(self.dh_key, self.dh_p), reference.deriveSupplementaryKey(self.dh_key, self.dh_p), err)
